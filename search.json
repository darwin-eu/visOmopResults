[{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://darwin-eu.github.io/visOmopResults/articles/a01_tables.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Tables","text":"visOmopResults package provides user-friendly tools creating well-formatted tables plots publication-ready. vignette, focus specifically table formatting functionalities. package supports four table formats: <tibble>, <gt>, <flextable>, <datatables>. <tibble> <data.frame> R object, <gt> <flextable> designed create publication-ready tables can exported different formats (e.g., PNG, Word, PDF, HTML), <datatables> display tables HTML pages. last three can used ShinyApps, RMarkdown, Quarto, . Although primary aim package simplify handling <summarised_result> class (see omopgenerics details), functionalities can applied <data.frame> certain requirements met.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/a01_tables.html","id":"types-of-table-functions","dir":"Articles","previous_headings":"Introduction","what":"Types of Table Functions","title":"Tables","text":"two main categories table functions package: Main Table Functions: Comprehensive functions like visOmopTable() visTable() allow users fully format tables, including specifying headers, grouping columns, customising styles. Additional Table Formatting Functions: format function set provides granular control specific table elements, enabling advanced customisation beyond main functions. vignette guide usage functions.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/a01_tables.html","id":"main-functions","dir":"Articles","previous_headings":"","what":"Main Functions","title":"Tables","text":"functions built top format functions, providing quick straightforward way format tables.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/a01_tables.html","id":"vistable","dir":"Articles","previous_headings":"Main Functions","what":"visTable()","title":"Tables","text":"visTable() flexible function designed format <data.frame>. Let’s demonstrate usage dataset palmerpenguins package. can format data <gt> table using visTable() follows: use arguments estimateName header, <data.frame> must estimates arranged three columns: estimate_name, estimate_type, estimate_value. Let’s reshape example dataset accordingly demonstrate creating <flextable> object: Estimate name Species Adelie Gentoo Chinstrap Island Biscoe Torgersen Dream Biscoe Dream female Bill length - Bill depth (mm) 36.64 - 17.22 36.61 - 17.40 36.27 - 17.79 45.30 - 14.13 46.00 - 17.30 Flipper length (mm) 186.56 190.00 189.00 213.00 192.67 male Bill length - Bill depth (mm) 40.76 - 19.03 40.92 - 18.84 40.11 - 18.89 48.54 - 15.70 51.40 - 19.60 Flipper length (mm) 192.56 193.50 195.00 222.09 202.78","code":"library(visOmopResults) library(palmerpenguins) library(dplyr) library(tidyr) x <- penguins |>    filter(!is.na(sex) & year == 2008) |>    select(!\"body_mass_g\") |>   summarise(across(ends_with(\"mm\"), ~mean(.x)), .by = c(\"species\", \"island\", \"sex\")) head(x) #> # A tibble: 6 × 6 #>   species island    sex    bill_length_mm bill_depth_mm flipper_length_mm #>   <fct>   <fct>     <fct>           <dbl>         <dbl>             <dbl> #> 1 Adelie  Biscoe    female           36.6          17.2              187. #> 2 Adelie  Biscoe    male             40.8          19.0              193. #> 3 Adelie  Torgersen female           36.6          17.4              190  #> 4 Adelie  Torgersen male             40.9          18.8              194. #> 5 Adelie  Dream     female           36.3          17.8              189  #> 6 Adelie  Dream     male             40.1          18.9              195 visTable(   result = x,   groupColumn = c(\"sex\"),   rename = c(\"Bill length (mm)\" = \"bill_length_mm\",              \"Bill depth (mm)\" = \"bill_depth_mm\",              \"Flipper length (mm)\" = \"flipper_length_mm\",              \"Body mass (g)\" = \"body_mass_g\"),   type = \"gt\",   hide = \"year\" ) # Transforming the dataset to include estimate columns x <- x |>   pivot_longer(     cols = ends_with(\"_mm\"),      names_to = \"estimate_name\",      values_to = \"estimate_value\"   ) |>   mutate(estimate_type = \"numeric\")  # Creating a formatted flextable visTable(   result = x,   estimateName = c(     \"Bill length - Bill depth (mm)\" = \"<bill_length_mm> - <bill_depth_mm>\",     \"Flipper length (mm)\" = \"<flipper_length_mm>\"   ),   header = c(\"species\", \"island\"),   groupColumn = \"sex\",   type = \"flextable\",   hide = c(\"year\", \"estimate_type\") )"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/a01_tables.html","id":"visomoptable","dir":"Articles","previous_headings":"Main Functions","what":"visOmopTable()","title":"Tables","text":"visOmopTable() extends functionality visTable() additional features tailored specifically handling <summarised_result> objects, making easier work standardized result formats. Let’s demonstrate visOmopTable() mock <summarised_result>: workflow quite similar visTable(), includes specific enhancements <summarised_result> objects: Automatic splitting: result object always processed using splitAll() function. Thereby, column names use arguments must based split result. settingsColumn argument: Use argument specify settings displayed main table. columns specified can also referenced arguments header, rename, groupColumn. header argument: accepts specific <summarised_result> inputs, addition typical usage visTable(). example, use “strata” header display variables strata_name, use “settings” show settings specified settingsColumns. Hidden columns: result_id estimate_type columns always hidden serve helper columns internal processes. Suppressed estimates: result object processed suppress(), obscured estimates can displayed default na value “<{minCellCount}” corresponding minimum count value used. can controlled using showMinCellCount argument. next example, visOmopTable() generates <gt> table displaying suppressed estimates (counts 1,000,000) specified minimum cell count.","code":"# Creating a mock summarised result result <- mockSummarisedResult() |>   filter(strata_name == \"age_group &&& sex\")  # Displaying the first few rows head(result) #> # A tibble: 6 × 13 #>   result_id cdm_name group_name  group_level strata_name       strata_level    #>       <int> <chr>    <chr>       <chr>       <chr>             <chr>           #> 1         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #> 2         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #> 3         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #> 4         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #> 5         1 mock     cohort_name cohort2     age_group &&& sex <40 &&& Male    #> 6         1 mock     cohort_name cohort2     age_group &&& sex >=40 &&& Male   #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>  # Creating a formatted gt table visOmopTable(   result = result,   estimateName = c(     \"N%\" = \"<count> (<percentage>)\",     \"N\" = \"<count>\",     \"Mean (SD)\" = \"<mean> (<sd>)\"   ),   header = c(\"package_name\", \"age_group\"),   groupColumn = c(\"cohort_name\", \"sex\"),   settingsColumn = \"package_name\",   type = \"gt\" ) result |>   suppress(minCellCount = 1000000) |>   visOmopTable(     estimateName = c(       \"N%\" = \"<count> (<percentage>)\",       \"N\" = \"<count>\",       \"Mean (SD)\" = \"<mean> (<sd>)\"     ),     header = c(\"My visOmopTable\", \"group\"),     groupColumn = c(\"strata\"),     hide = c(\"cdm_name\"),     showMinCellCount = TRUE,     type = \"gt\"   )"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/a01_tables.html","id":"styling-tables","dir":"Articles","previous_headings":"Main Functions","what":"Styling tables","title":"Tables","text":"Tables displayed visOmopResults() follow default style, customisation possible .options argument. argument allows users modify various formatting aspects using options format functions (see format Functions section learn ). table details format function styling option belongs , along description option: view default .options settings used vis tables, use following function:","code":"tableOptions() #> $decimals #>    integer percentage    numeric proportion  #>          0          2          2          2  #>  #> $decimalMark #> [1] \".\" #>  #> $bigMark #> [1] \",\" #>  #> $keepNotFormatted #> [1] TRUE #>  #> $useFormatOrder #> [1] TRUE #>  #> $delim #> [1] \"\\n\" #>  #> $includeHeaderName #> [1] TRUE #>  #> $includeHeaderKey #> [1] TRUE #>  #> $style #> [1] \"default\" #>  #> $na #> [1] \"-\" #>  #> $title #> NULL #>  #> $subtitle #> NULL #>  #> $caption #> NULL #>  #> $groupAsColumn #> [1] FALSE #>  #> $groupOrder #> NULL #>  #> $merge #> [1] \"all_columns\""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/a01_tables.html","id":"styling-tables-1","dir":"Articles","previous_headings":"Main Functions > Styling tables","what":"Styling tables","title":"Tables","text":"inspect code default styles different table types supported, can use following function:","code":"tableStyle(type = \"gt\") #> list(header = list(gt::cell_fill(color = \"#c8c8c8\"), gt::cell_text(weight = \"bold\",  #>     align = \"center\")), header_name = list(gt::cell_fill(color = \"#d9d9d9\"),  #>     gt::cell_text(weight = \"bold\", align = \"center\")), header_level = list(gt::cell_fill(color = \"#e1e1e1\"),  #>     gt::cell_text(weight = \"bold\", align = \"center\")), column_name = list(gt::cell_text(weight = \"bold\",  #>     align = \"center\")), group_label = list(gt::cell_fill(color = \"#e9e9e9\"),  #>     gt::cell_text(weight = \"bold\")), title = list(gt::cell_text(weight = \"bold\",  #>     size = 15, align = \"center\")), subtitle = list(gt::cell_text(weight = \"bold\",  #>     size = 12, align = \"center\")), body = list())  tableStyle(type = \"flextable\") #> list(header = list(cell = officer::fp_cell(background.color = \"#c8c8c8\"),  #>     text = officer::fp_text(bold = TRUE)), header_name = list(cell = officer::fp_cell(background.color = \"#d9d9d9\"),  #>     text = officer::fp_text(bold = TRUE)), header_level = list(cell = officer::fp_cell(background.color = \"#e1e1e1\"),  #>     text = officer::fp_text(bold = TRUE)), column_name = list(text = officer::fp_text(bold = TRUE)),  #>     group_label = list(cell = officer::fp_cell(background.color = \"#e9e9e9\",  #>         border = officer::fp_border(color = \"gray\")), text = officer::fp_text(bold = TRUE)),  #>     title = list(text = officer::fp_text(bold = TRUE, font.size = 15)),  #>     subtitle = list(text = officer::fp_text(bold = TRUE, font.size = 12)),  #>     body = list())  tableStyle(type = \"datatable\") #> list(caption = \"caption-side: bottom; text-align: center;\", scrollX = TRUE,  #>     scrollY = 400, scroller = TRUE, deferRender = TRUE, scrollCollapse = TRUE,  #>     fixedColumns = list(leftColumns = 1, rightColumns = 1), fixedHeader = TRUE,  #>     pageLength = 10, lengthMenu = c(5, 10, 20, 50, 100), filter = \"bottom\",  #>     searchHighlight = TRUE, rownames = FALSE)"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/a01_tables.html","id":"format-functions","dir":"Articles","previous_headings":"","what":"format Functions","title":"Tables","text":"format set functions can used pipeline transform format <data.frame> <summarised_result> object. , ’ll demonstrate utilize functions step--step manner.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/a01_tables.html","id":"format-estimates","dir":"Articles","previous_headings":"format Functions","what":"1) Format Estimates","title":"Tables","text":"formatEstimateName() formatEstimateValue() functions enable customise naming display estimates table. illustrate usage, ’ll continue result dataset. Let’s first take look estimates formatting applied:","code":"result |>    filterGroup(cohort_name == \"cohort1\") |>  # visOmopResult filter function   filterStrata(age_group == \"<40\", sex == \"Female\") |>  # visOmopResult filter function   select(variable_name, variable_level, estimate_name, estimate_type, estimate_value) #> # A tibble: 7 × 5 #>   variable_name   variable_level estimate_name estimate_type estimate_value   #>   <chr>           <chr>          <chr>         <chr>         <chr>            #> 1 number subjects NA             count         integer       1956698          #> 2 age             NA             mean          numeric       63.6465614894405 #> 3 age             NA             sd            numeric       3.15241752425209 #> 4 Medications     Amoxiciline    count         integer       27860            #> 5 Medications     Amoxiciline    percentage    percentage    21.3172711199149 #> 6 Medications     Ibuprofen      count         integer       66887            #> 7 Medications     Ibuprofen      percentage    percentage    91.8803214561194"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/a01_tables.html","id":"suppressed-estimates","dir":"Articles","previous_headings":"format Functions > 1) Format Estimates","what":"1.1) Suppressed estimates","title":"Tables","text":"function formatMinCellCount() indicates estimates suppressed due minimum cell count specified study. Estimates suppressed using omopgenerics::suppress(), replaces estimate symbol “-”. reporting results, want distinguish suppressed estimates missing values (NA), formatMinCellCount() function can used follows:","code":"result <- result |> formatMinCellCount()"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/a01_tables.html","id":"estimate-values","dir":"Articles","previous_headings":"format Functions > 1) Format Estimates","what":"1.2) Estimate values","title":"Tables","text":"formatEstimateValue() function allows specify number decimals different estimate_types estimate_names, well customise decimal thousand separators. Let’s see previous estimates updated afterwars: can see, estimates now reflect specified formatting rules.","code":"# Formatting estimate values result <- result |>   formatEstimateValue(     decimals = c(integer = 0, numeric = 4, percentage = 2),     decimalMark = \".\",     bigMark = \",\"   )  # Displaying the formatted subset result |>    filterGroup(cohort_name == \"cohort1\") |>     filterStrata(age_group == \"<40\", sex == \"Female\") |>    select(variable_name, variable_level, estimate_name, estimate_type, estimate_value) #> # A tibble: 7 × 5 #>   variable_name   variable_level estimate_name estimate_type estimate_value #>   <chr>           <chr>          <chr>         <chr>         <chr>          #> 1 number subjects NA             count         integer       1,956,698      #> 2 age             NA             mean          numeric       63.6466        #> 3 age             NA             sd            numeric       3.1524         #> 4 Medications     Amoxiciline    count         integer       27,860         #> 5 Medications     Amoxiciline    percentage    percentage    21.32          #> 6 Medications     Ibuprofen      count         integer       66,887         #> 7 Medications     Ibuprofen      percentage    percentage    91.88"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/a01_tables.html","id":"estimate-names","dir":"Articles","previous_headings":"format Functions > 1) Format Estimates","what":"1.3) Estimate names","title":"Tables","text":"Next, format estimate names using formatEstimateName() function. function allows us combine counts percentages “N (%)”, among estimate combinations Now, estimate names displayed specified, “N (%)” counts percentages. keepNotFormatted argument ensures unformatted rows remain dataset, useFormatOrder allows control display order estimates.","code":"# Formatting estimate names result <- result |>    formatEstimateName(     estimateName = c(       \"N (%)\" = \"<count> (<percentage>%)\",        \"N\" = \"<count>\",       \"Mean (SD)\" = \"<mean> (<sd>)\"     ),     keepNotFormatted = TRUE,     useFormatOrder = FALSE   )  # Displaying the formatted subset with new estimate names result |>    filterGroup(cohort_name == \"cohort1\") |>     filterStrata(age_group == \"<40\", sex == \"Female\") |>    select(variable_name, variable_level, estimate_name, estimate_type, estimate_value) #> # A tibble: 4 × 5 #>   variable_name   variable_level estimate_name estimate_type estimate_value   #>   <chr>           <chr>          <chr>         <chr>         <chr>            #> 1 number subjects NA             N             character     1,956,698        #> 2 age             NA             Mean (SD)     character     63.6466 (3.1524) #> 3 Medications     Amoxiciline    N (%)         character     27,860 (21.32%)  #> 4 Medications     Ibuprofen      N (%)         character     66,887 (91.88%)"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/a01_tables.html","id":"format-header","dir":"Articles","previous_headings":"format Functions","what":"2) Format Header","title":"Tables","text":"formatHeader() used create complex multi-level headers tables, making easy present grouped data clearly.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/a01_tables.html","id":"header-levels","dir":"Articles","previous_headings":"format Functions > 2) Format Header","what":"Header levels","title":"Tables","text":"3 different levels headers, identified following keys: header: Custom labels correspond column names table values. header_name: Labels derived column names. Can omitted includeHeaderName =  FALSE. header_level: Labels derived values within columns set header. keys, together delimiter header levels (delim) used formatTable() format style gt flextable tables. Let’s create multi-level header strata columns, including three keys. show column names transformed: table formatting, won’t include header_name labels. Let’s see looks exclude :","code":"result |>   mutate(across(c(\"strata_name\", \"strata_level\"), ~ gsub(\"&&&\", \"and\", .x))) |>   formatHeader(     header = c(\"Stratifications\", \"strata_name\", \"strata_level\"),     delim = \"\\n\",     includeHeaderName = TRUE,     includeHeaderKey = TRUE   ) |>    colnames() #>  [1] \"result_id\"                                                                                                                                    #>  [2] \"cdm_name\"                                                                                                                                     #>  [3] \"group_name\"                                                                                                                                   #>  [4] \"group_level\"                                                                                                                                  #>  [5] \"variable_name\"                                                                                                                                #>  [6] \"variable_level\"                                                                                                                               #>  [7] \"estimate_name\"                                                                                                                                #>  [8] \"estimate_type\"                                                                                                                                #>  [9] \"additional_name\"                                                                                                                              #> [10] \"additional_level\"                                                                                                                             #> [11] \"[header]Stratifications\\n[header_name]strata_name\\n[header_level]age_group and sex\\n[header_name]strata_level\\n[header_level]<40 and Male\"    #> [12] \"[header]Stratifications\\n[header_name]strata_name\\n[header_level]age_group and sex\\n[header_name]strata_level\\n[header_level]>=40 and Male\"   #> [13] \"[header]Stratifications\\n[header_name]strata_name\\n[header_level]age_group and sex\\n[header_name]strata_level\\n[header_level]<40 and Female\"  #> [14] \"[header]Stratifications\\n[header_name]strata_name\\n[header_level]age_group and sex\\n[header_name]strata_level\\n[header_level]>=40 and Female\" result <- result |>   mutate(across(c(\"strata_name\", \"strata_level\"), ~ gsub(\"&&&\", \"and\", .x))) |>   formatHeader(     header = c(\"Stratifications\", \"strata_name\", \"strata_level\"),     delim = \"\\n\",     includeHeaderName = FALSE,     includeHeaderKey = TRUE   )    colnames(result) #>  [1] \"result_id\"                                                                               #>  [2] \"cdm_name\"                                                                                #>  [3] \"group_name\"                                                                              #>  [4] \"group_level\"                                                                             #>  [5] \"variable_name\"                                                                           #>  [6] \"variable_level\"                                                                          #>  [7] \"estimate_name\"                                                                           #>  [8] \"estimate_type\"                                                                           #>  [9] \"additional_name\"                                                                         #> [10] \"additional_level\"                                                                        #> [11] \"[header]Stratifications\\n[header_level]age_group and sex\\n[header_level]<40 and Male\"    #> [12] \"[header]Stratifications\\n[header_level]age_group and sex\\n[header_level]>=40 and Male\"   #> [13] \"[header]Stratifications\\n[header_level]age_group and sex\\n[header_level]<40 and Female\"  #> [14] \"[header]Stratifications\\n[header_level]age_group and sex\\n[header_level]>=40 and Female\""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/a01_tables.html","id":"format-table","dir":"Articles","previous_headings":"format Functions","what":"3) Format Table","title":"Tables","text":"formatTable() function final step formatting pipeline, formatted <data.frame> converted either <gt> <flextable>.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/a01_tables.html","id":"prepare-data","dir":"Articles","previous_headings":"format Functions > 3) Format Table","what":"Prepare data","title":"Tables","text":"using formatTable(), ’ll tidy <data.frame> splitting group additional name-level columns (see vignette tidying <summarised_result>), drop unwanted columns:","code":"result <- result |>   splitGroup() |>   splitAdditional() |>   select(!c(\"result_id\", \"estimate_type\", \"cdm_name\")) head(result) #> # A tibble: 6 × 8 #>   cohort_name variable_name  variable_level estimate_name [header]Stratificati…¹ #>   <chr>       <chr>          <chr>          <chr>         <chr>                  #> 1 cohort1     number subjec… NA             N             3,203,857              #> 2 cohort2     number subjec… NA             N             7,353,196              #> 3 cohort1     age            NA             Mean (SD)     22.5563 (3.8918)       #> 4 cohort2     age            NA             Mean (SD)     68.0163 (0.6522)       #> 5 cohort1     Medications    Amoxiciline    N (%)         54,248 (92.00%)        #> 6 cohort2     Medications    Amoxiciline    N (%)         37,697 (71.83%)        #> # ℹ abbreviated name: #> #   ¹​`[header]Stratifications\\n[header_level]age_group and sex\\n[header_level]<40 and Male` #> # ℹ 3 more variables: #> #   `[header]Stratifications\\n[header_level]age_group and sex\\n[header_level]>=40 and Male` <chr>, #> #   `[header]Stratifications\\n[header_level]age_group and sex\\n[header_level]<40 and Female` <chr>, #> #   `[header]Stratifications\\n[header_level]age_group and sex\\n[header_level]>=40 and Female` <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/a01_tables.html","id":"use-formattable","dir":"Articles","previous_headings":"format Functions > 3) Format Table","what":"Use formatTable()","title":"Tables","text":"Now data cleaned organized, formatTable() can used create well-structured <gt> <flextable> object. examples , used default style defined visOmopResults package (use gtStyle() flextableStyle() see styles). However, ’s possible customise appearance different parts table better suit needs.","code":"result |>   formatTable(     type = \"gt\",     delim = \"\\n\",     style = \"default\",     na = \"-\",     title = \"My formatted table!\",     subtitle = \"Created with the `visOmopResults` R package.\",     caption = NULL,     groupColumn = \"cohort_name\",     groupAsColumn = FALSE,     groupOrder = c(\"cohort2\", \"cohort1\"),     merge = \"variable_name\"   )"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/a01_tables.html","id":"customising-table-styles","dir":"Articles","previous_headings":"format Functions > 3) Format Table","what":"customising Table Styles","title":"Tables","text":"Let’s start applying custom style <gt> table: creating similarly styled <flextable>, office R package required access specific formatting functions. formatted table! Created `visOmopResults` R package. variable_name variable_level estimate_name Stratifications age_group sex <40 Male >=40 Male <40 Female >=40 Female cohort2 number subjects - N 7,353,196 1,959,567 9,805,397 7,415,215 age - Mean (SD) 68.0163 (0.6522) 49.8846 (3.5421) 64.1679 (8.2520) 66.0284 (2.7382) Medications Amoxiciline N (%) 37,697 (71.83%) 55,991 (24.13%) 85,708 (54.70%) 38,481 (83.48%)  Ibuprofen N (%) 1,148 (16.46%) 88,825 (66.32%) 99,635 (85.66%) 50,019 (92.65%) cohort1 number subjects - N 3,203,857 4,023,282 1,956,698 4,035,381 age - Mean (SD) 22.5563 (3.8918) 30.0831 (4.6119) 63.6466 (3.1524) 47.9025 (1.7468) Medications Amoxiciline N (%) 54,248 (92.00%) 54,460 (40.07%) 27,860 (21.32%) 44,670 (67.18%)  Ibuprofen N (%) 21,843 (56.69%) 41,836 (25.30%) 66,887 (91.88%) 50,765 (86.74%)","code":"result |>   formatTable(     type = \"gt\",     delim = \"\\n\",     style = list(       \"header\" = list(gt::cell_text(weight = \"bold\"),                        gt::cell_fill(color = \"orange\")),       \"header_level\" = list(gt::cell_text(weight = \"bold\"),                        gt::cell_fill(color = \"yellow\")),       \"column_name\" = gt::cell_text(weight = \"bold\"),       \"group_label\" = list(gt::cell_fill(color = \"blue\"),                            gt::cell_text(color = \"white\", weight = \"bold\")),       \"title\" = list(gt::cell_text(size = 20, weight = \"bold\")),       \"subtitle\" = list(gt::cell_text(size = 15)),       \"body\" = gt::cell_text(color = \"red\")     ),     na = \"-\",     title = \"My formatted table!\",     subtitle = \"Created with the `visOmopResults` R package.\",     caption = NULL,     groupColumn = \"cohort_name\",     groupAsColumn = FALSE,     groupOrder = c(\"cohort2\", \"cohort1\"),     merge = \"variable_name\"   ) result |>   formatTable(     type = \"flextable\",     delim = \"\\n\",     style = list(       \"header\" = list(         \"cell\" = officer::fp_cell(background.color = \"orange\"),         \"text\" = officer::fp_text(bold = TRUE)),       \"header_level\" = list(         \"cell\" = officer::fp_cell(background.color = \"yellow\"),         \"text\" = officer::fp_text(bold = TRUE)),       \"column_name\" = list(\"text\" = officer::fp_text(bold = TRUE)),       \"group_label\" = list(         \"cell\" = officer::fp_cell(background.color = \"blue\"),         \"text\" = officer::fp_text(bold = TRUE, color = \"white\")),       \"title\" = list(\"text\" = officer::fp_text(bold = TRUE, font.size = 20)),       \"subtitle\" = list(\"text\" = officer::fp_text(font.size = 15)),       \"body\" = list(\"text\" = officer::fp_text(color = \"red\"))     ),     na = \"-\",     title = \"My formatted table!\",     subtitle = \"Created with the `visOmopResults` R package.\",     caption = NULL,     groupColumn = \"cohort_name\",     groupAsColumn = FALSE,     groupOrder = c(\"cohort2\", \"cohort1\"),     merge = \"variable_name\"   )"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/a02_plots.html","id":"plotting-with-a-summarised_result","dir":"Articles","previous_headings":"","what":"Plotting with a <summarised_result>","title":"Plots","text":"vignette, use penguins dataset palmerpenguins package. dataset summarised using PatientProfiles::summariseResult() function, aggregates data <summarised_result> format:","code":"library(PatientProfiles) library(palmerpenguins) library(dplyr)  summariseIsland <- function(island) {   penguins |>     filter(.data$island == .env$island) |>     summariseResult(       group = \"species\",       includeOverallGroup = TRUE,       strata = list(\"year\", \"sex\", c(\"year\", \"sex\")),       variables = c(         \"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\",          \"sex\"),       estimates = c(         \"median\", \"q25\", \"q75\", \"min\", \"max\", \"count_missing\", \"count\",          \"percentage\", \"density\")     ) |>     suppressMessages() |>     mutate(cdm_name = island) }  penguinsSummary <- bind(   summariseIsland(\"Torgersen\"),    summariseIsland(\"Biscoe\"),    summariseIsland(\"Dream\") )  penguinsSummary |> glimpse() #> Rows: 429,296 #> Columns: 13 #> $ result_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ cdm_name         <chr> \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"… #> $ group_name       <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ group_level      <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ strata_name      <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ strata_level     <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ variable_name    <chr> \"number records\", \"bill_length_mm\", \"bill_length_mm\",… #> $ variable_level   <chr> NA, NA, NA, NA, NA, NA, NA, \"density_001\", \"density_0… #> $ estimate_name    <chr> \"count\", \"median\", \"q25\", \"q75\", \"min\", \"max\", \"count… #> $ estimate_type    <chr> \"integer\", \"numeric\", \"numeric\", \"numeric\", \"numeric\"… #> $ estimate_value   <chr> \"52\", \"38.9\", \"36.65\", \"41.1\", \"33.5\", \"46\", \"1\", \"29… #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"…"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/a02_plots.html","id":"plotting-principles-for-summarised_result-objects","dir":"Articles","previous_headings":"Plotting with a <summarised_result>","what":"Plotting principles for <summarised_result> objects","title":"Plots","text":"1) Tidy Format working <summarised_result> objects, data internally converted tidy format plotting. important distinction columns strata_name strata_level original <summarised_result> used directly plotting functions. Instead, tidy columns referenced. information tidy format, refer omopgenerics package vignette <summarised_result> . identify available tidy columns, use tidyColumns() function: 2) Subsetting Variables calling plotting functions, always subset <summarised_result> object variable interest. Avoid combining results unrelated variables, may lead NA values tidy format, can affect plots.","code":"tidyColumns(penguinsSummary) #>  [1] \"cdm_name\"       \"species\"        \"year\"           \"sex\"            #>  [5] \"variable_name\"  \"variable_level\" \"count\"          \"median\"         #>  [9] \"q25\"            \"q75\"            \"min\"            \"max\"            #> [13] \"count_missing\"  \"density_x\"      \"density_y\"      \"percentage\""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/a02_plots.html","id":"scatter-plot","dir":"Articles","previous_headings":"Plotting with a <summarised_result>","what":"Scatter plot","title":"Plots","text":"can create simple scatter plots using plotScatter() let’s see examples:  Additionally, can use function themeVisOmop() change default ggplot2 style default style. , can use standard ggplot2 functionalities returned plot:","code":"penguinsSummary |>   filter(variable_name == \"bill_depth_mm\") |>   filterStrata(year != \"overall\", sex == \"overall\") |>   scatterPlot(     x = \"year\",      y = \"median\",     line = TRUE,      point = TRUE,     ribbon = FALSE,     facet = \"cdm_name\",     colour = \"species\"   ) penguinsSummary |>   filter(variable_name %in% c(\"bill_length_mm\", \"bill_depth_mm\"))|>   filterStrata(year == \"overall\", sex == \"overall\") |>   filterGroup(species != \"overall\") |>   scatterPlot(     x = \"density_x\",      y = \"density_y\",     line = TRUE,      point = FALSE,     ribbon = FALSE,     facet = cdm_name ~ variable_name,     colour = \"species\"   ) +   themeVisOmop() +   ggplot2::facet_grid(cdm_name ~ variable_name, scales = \"free_x\") penguinsSummary |>   filter(variable_name == \"flipper_length_mm\") |>   filterStrata(year != \"overall\", sex %in% c(\"female\", \"male\")) |>   scatterPlot(     x = c(\"year\", \"sex\"),      y = \"median\",     ymin = \"q25\",     ymax = \"q75\",     line = FALSE,      point = TRUE,     ribbon = FALSE,     facet = cdm_name ~ species,     colour = \"sex\",     group = c(\"year\", \"sex\")   )  +   themeVisOmop() +   ggplot2::coord_flip() +   ggplot2::labs(y = \"Flipper length (mm)\") +    ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 90, vjust = 0.5, hjust=1)) penguinsSummary |>   filter(     variable_name %in% c(\"flipper_length_mm\", \"bill_length_mm\", \"bill_depth_mm\")   ) |>   filterStrata(sex == \"overall\") |>   scatterPlot(     x = \"year\",      y = \"median\",     ymin = \"min\",     ymax = \"max\",     line = FALSE,      point = TRUE,     ribbon = TRUE,     facet = cdm_name ~ species,     colour = \"variable_name\",     group = c(\"variable_name\")   ) +   themeVisOmop(fontsizeRef = 12) +    ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 90, vjust = 0.5, hjust=1))"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/a02_plots.html","id":"bar-plot","dir":"Articles","previous_headings":"Plotting with a <summarised_result>","what":"Bar plot","title":"Plots","text":"Let’s create bar plots:","code":"penguinsSummary |>   filter(variable_name == \"number records\") |>   filterGroup(species != \"overall\") |>   filterStrata(sex != \"overall\", year != \"overall\") |>   barPlot(     x = \"year\",     y = \"count\",     colour = \"sex\",     facet = cdm_name ~ species   ) +   themeVisOmop(fontsizeRef = 12)"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/a02_plots.html","id":"box-plot","dir":"Articles","previous_headings":"Plotting with a <summarised_result>","what":"Box plot","title":"Plots","text":"Let’s create box plots body mass:   Note didnt specify x levels x axis, box plots produced anyway.","code":"penguinsSummary |>   filter(variable_name == \"body_mass_g\") |>   boxPlot(x = \"year\", facet = species ~ cdm_name, colour = \"sex\") +   themeVisOmop() penguinsSummary |>   filter(variable_name == \"body_mass_g\") |>   filterGroup(species != \"overall\") |>   filterStrata(sex %in% c(\"female\", \"male\"), year != \"overall\") |>   boxPlot(x = \"cdm_name\", facet = c(\"sex\", \"species\"), colour = \"year\") +   themeVisOmop(fontsizeRef = 11)"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/a02_plots.html","id":"plotting-with-a-data-frame","dir":"Articles","previous_headings":"","what":"Plotting with a <data.frame>","title":"Plots","text":"Plotting functions can also used usual <data.frame>. case use tidy format penguinsSummary. Using tidy format, can replicate plots. instance, recreate previous example:","code":"penguinsTidy <- penguinsSummary |>   filter(!estimate_name %in% c(\"density_x\", \"density_y\")) |> # remove density for simplicity   tidy() penguinsTidy |> glimpse() #> Rows: 720 #> Columns: 14 #> $ cdm_name       <chr> \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"To… #> $ species        <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\", … #> $ year           <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\", … #> $ sex            <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\", … #> $ variable_name  <chr> \"number records\", \"bill_length_mm\", \"bill_depth_mm\", \"f… #> $ variable_level <chr> NA, NA, NA, NA, NA, \"female\", \"male\", NA, NA, NA, NA, N… #> $ count          <int> 52, NA, NA, NA, NA, 24, 23, 5, 20, 16, 16, NA, NA, NA, … #> $ median         <int> NA, 38, 18, 191, 3700, NA, NA, NA, NA, NA, NA, 38, 38, … #> $ q25            <int> NA, 36, 17, 187, 3338, NA, NA, NA, NA, NA, NA, 37, 35, … #> $ q75            <int> NA, 41, 19, 195, 4000, NA, NA, NA, NA, NA, NA, 39, 41, … #> $ min            <int> NA, 33, 15, 176, 2900, NA, NA, NA, NA, NA, NA, 34, 33, … #> $ max            <int> NA, 46, 21, 210, 4700, NA, NA, NA, NA, NA, NA, 46, 45, … #> $ count_missing  <int> NA, 1, 1, 1, 1, NA, NA, NA, NA, NA, NA, 1, 0, 0, 1, 0, … #> $ percentage     <dbl> NA, NA, NA, NA, NA, 46.153846, 44.230769, 9.615385, NA,… penguinsTidy |>   filter(     variable_name == \"body_mass_g\",     species != \"overall\",     sex %in% c(\"female\", \"male\"),     year != \"overall\"   ) |>   boxPlot(x = \"cdm_name\", facet = sex ~ species, colour = \"year\") +   themeVisOmop()"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/a02_plots.html","id":"custom-plotting","dir":"Articles","previous_headings":"","what":"Custom plotting","title":"Plots","text":"tidy format useful apply custom ggplot2 function may interested :","code":"library(ggplot2) penguinsSummary |>   filter(variable_name == \"number records\") |>   tidy() |>   ggplot(aes(x = year, y = sex, fill = count, label = count)) +   themeVisOmop() +   geom_tile() +   scale_fill_viridis_c(trans = \"log\") +    geom_text() +   facet_grid(cdm_name ~ species) +    ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 90, vjust = 0.5, hjust=1))"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/a02_plots.html","id":"combine-with-ggplot2","dir":"Articles","previous_headings":"","what":"Combine with ggplot2","title":"Plots","text":"plotting functions wrapper around ggplot2 package, outputs plotting functions can later customised ggplot2 similar tools. example can use ggplot2::labs() change labels ggplot2::theme() move location legend.  can also use ggplot2::ggsave() later save one plots ‘.png’ file.","code":"penguinsSummary |>   filter(     group_level != \"overall\",     strata_name == \"year &&& sex\",     !grepl(\"NA\", strata_level),     variable_name == \"body_mass_g\") |>   boxPlot(x = \"species\", facet = cdm_name ~ sex, colour = \"year\") +   themeVisOmop(fontsizeRef = 12) +   ylim(c(0, 6500)) +   labs(x = \"My custom x label\") ggsave(   \"figure8.png\", plot = last_plot(), device = \"png\", width = 15, height = 12,    units = \"cm\", dpi = 300)"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/a02_plots.html","id":"combine-with-plotly","dir":"Articles","previous_headings":"","what":"Combine with plotly","title":"Plots","text":"Although package currently provide plotly functionality ggplots can easily converted <plotly> ones using function plotly::ggplotly(). can make interactivity plots better.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martí Català. Author. Núria Mercadé-Besora. Author, maintainer. Yuchen Guo. Contributor. Elin Rowlands. Contributor. Marta Alcalde-Herraiz. Author. Edward Burn. Contributor.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Català M, Mercadé-Besora N, Alcalde-Herraiz M (2025). visOmopResults: Graphs Tables OMOP Results. R package version 1.0.1, https://github.com/darwin-eu/visOmopResults, https://darwin-eu.github.io/visOmopResults/.","code":"@Manual{,   title = {visOmopResults: Graphs and Tables for OMOP Results},   author = {Martí Català and Núria Mercadé-Besora and Marta Alcalde-Herraiz},   year = {2025},   note = {R package version 1.0.1, https://github.com/darwin-eu/visOmopResults},   url = {https://darwin-eu.github.io/visOmopResults/}, }"},{"path":[]},{"path":"https://darwin-eu.github.io/visOmopResults/index.html","id":"package-overview","dir":"","previous_headings":"","what":"Package overview","title":"Graphs and Tables for OMOP Results","text":"visOmopResults offers set functions tailored format objects class <summarised_result> (defined omopgenerics package). provides functionalities create formatted tables generate plots. visualisations highly versatile reporting results Shiny apps, RMarkdown, Quarto, , supporting various output formats HTML, PNG, Word, PDF.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/index.html","id":"lets-get-started","dir":"","previous_headings":"","what":"Let’s get started","title":"Graphs and Tables for OMOP Results","text":"can install latest version visOmopResults CRAN: can install development version GitHub : <summarised_result> standardised output format utilized across various packages, including: CohortCharacteristics DrugUtilisation IncidencePrevalence PatientProfiles CodelistGenerator CohortSurvival CohortSymmetry Although standard output format essential, can sometimes challenging manage. visOmopResults package aims simplify process. demonstrate package’s functionality, let’s start using mock results:","code":"install.packages(\"visOmopResults\") # install.packages(\"pak\") pak::pkg_install(\"darwin-eu/visOmopResults\") library(visOmopResults) result <- mockSummarisedResult()"},{"path":"https://darwin-eu.github.io/visOmopResults/index.html","id":"tables-visualisations","dir":"","previous_headings":"","what":"Tables visualisations","title":"Graphs and Tables for OMOP Results","text":"Currently table functionalities built around 4 packages: tibble, gt, flextable, datatable. two main functions: visOmopTable(): Creates well-formatted table specifically <summarised_result> object. visTable(): Creates nicely formatted table <data.frame> object. Let’s see simple example:","code":"result |>   filterStrata(sex != \"overall\" & age_group != \"overall\") |>   visOmopTable(     type = \"flextable\",     estimateName = c(       \"N(%)\" = \"<count> (<percentage>%)\",        \"N\" = \"<count>\",        \"mean (sd)\" = \"<mean> (<sd>)\"),     header = c(\"sex\", \"age_group\"),     settingsColumn = NULL,     groupColumn = c(\"cohort_name\"),     rename = c(\"Variable\" = \"variable_name\", \" \" = \"variable_level\"),     hide = \"cdm_name\"   )"},{"path":"https://darwin-eu.github.io/visOmopResults/index.html","id":"plots-visualisations","dir":"","previous_headings":"","what":"Plots visualisations","title":"Graphs and Tables for OMOP Results","text":"Currently plot functionalities built around ggplot2. output plot functions <ggplot2> object can customised. three plotting functions: plotScatter() create scatter plot. plotBar() create bar plot. plotBox() create box plot. Additionally, themeVisOmop() function applies consistent styling plots, aligning package’s visual design. Let’s see can create simple boxplot age:","code":"library(dplyr) result |>   filter(variable_name == \"number subjects\") |>   filterStrata(sex != \"overall\") |>   barPlot(x = \"age_group\",            y = \"count\",           facet = \"cohort_name\",            colour = \"sex\") +   themeVisOmop(fontsizeRef = 12)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/barPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a bar plot visualisation from a <summarised_result> object — barPlot","title":"Create a bar plot visualisation from a <summarised_result> object — barPlot","text":"Create bar plot visualisation <summarised_result> object","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/barPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a bar plot visualisation from a <summarised_result> object — barPlot","text":"","code":"barPlot(   result,   x,   y,   width = NULL,   just = 0.5,   facet = NULL,   colour = NULL,   label = character() )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/barPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a bar plot visualisation from a <summarised_result> object — barPlot","text":"result <summarised_result> object. x Column estimate name used x variable. y Column estimate name used y variable. width Bar width, geom_col() ggplot2 package. just Adjustment column placement, geom_col() ggplot2 package. facet Variables facet , formula can provided specify variables used rows ones columns. colour Columns use determine colors. label Character vector columns display interactively plotly.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/barPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a bar plot visualisation from a <summarised_result> object — barPlot","text":"plot object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/barPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a bar plot visualisation from a <summarised_result> object — barPlot","text":"","code":"result <- mockSummarisedResult() |> dplyr::filter(variable_name == \"age\")  barPlot(   result = result,   x = \"cohort_name\",   y = \"mean\",   facet = c(\"age_group\", \"sex\"),   colour = \"sex\")"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/boxPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a box plot visualisation from a <summarised_result> object — boxPlot","title":"Create a box plot visualisation from a <summarised_result> object — boxPlot","text":"Create box plot visualisation <summarised_result> object","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/boxPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a box plot visualisation from a <summarised_result> object — boxPlot","text":"","code":"boxPlot(   result,   x,   lower = \"q25\",   middle = \"median\",   upper = \"q75\",   ymin = \"min\",   ymax = \"max\",   facet = NULL,   colour = NULL,   label = character() )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/boxPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a box plot visualisation from a <summarised_result> object — boxPlot","text":"result <summarised_result> object. x Columns use x axes. lower Estimate name lower quantile box. middle Estimate name middle line box. upper Estimate name upper quantile box. ymin Estimate name lower limit bars. ymax Estimate name upper limit bars. facet Variables facet , formula can provided specify variables used rows ones columns. colour Columns use determine colors. label Character vector columns display interactively plotly.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/boxPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a box plot visualisation from a <summarised_result> object — boxPlot","text":"ggplot2 object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/boxPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a box plot visualisation from a <summarised_result> object — boxPlot","text":"","code":"dplyr::tibble(year = \"2000\", q25 = 25, median = 50, q75 = 75, min = 0, max = 100) |>   boxPlot(x = \"year\")"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/customiseText.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply styling to text or column names — customiseText","title":"Apply styling to text or column names — customiseText","text":"function styles character vectors column names data frame. styling function can customised, can provide specific replacements certain values.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/customiseText.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply styling to text or column names — customiseText","text":"","code":"customiseText(   x,   fun = function(x) stringr::str_to_sentence(gsub(\"_\", \" \", x)),   custom = NULL,   keep = NULL )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/customiseText.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply styling to text or column names — customiseText","text":"x character vector style text. fun styling function apply text x. default function converts snake_case sentence case. custom named character vector indicating custom names specific values x. NULL, styling function fun applied values. keep Either character vector names keep unchanged. NULL, names styled.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/customiseText.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply styling to text or column names — customiseText","text":"character vector styled text data frame styled column names.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/customiseText.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply styling to text or column names — customiseText","text":"","code":"# Styling a character vector customiseText(c(\"some_column_name\", \"another_column\")) #> [1] \"Some column name\" \"Another column\"    # Custom styling for specific values customiseText(x = c(\"some_column\", \"another_column\"),           custom = c(\"Custom Name\" = \"another_column\")) #> [1] \"Some column\" \"Custom Name\"  # Keeping specific values unchanged customiseText(x = c(\"some_column\", \"another_column\"), keep = \"another_column\") #> [1] \"Some column\"    \"another_column\"  # Styling column names and variables in a data frame dplyr::tibble(   some_column = c(\"hi_there\", \"rename_me\", \"example\", \"to_keep\"),   another_column = 1:4,   to_keep = \"as_is\" ) |>   dplyr::mutate(     \"some_column\" = customiseText(some_column, custom = c(\"EXAMPLE\" = \"example\"), keep = \"to_keep\")   ) |>   dplyr::rename_with(.fn = ~ customiseText(.x, keep = \"to_keep\")) #> # A tibble: 4 × 3 #>   `Some column` `Another column` to_keep #>   <chr>                    <int> <chr>   #> 1 Hi there                     1 as_is   #> 2 Rename me                    2 as_is   #> 3 EXAMPLE                      3 as_is   #> 4 to_keep                      4 as_is"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/emptyPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns an empty plot — emptyPlot","title":"Returns an empty plot — emptyPlot","text":"Returns empty plot","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/emptyPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns an empty plot — emptyPlot","text":"","code":"emptyPlot()"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/emptyPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns an empty plot — emptyPlot","text":"empty ggplot object","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/emptyPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns an empty plot — emptyPlot","text":"","code":"emptyPlot()"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/emptyTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns an empty table — emptyTable","title":"Returns an empty table — emptyTable","text":"Returns empty table","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/emptyTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns an empty table — emptyTable","text":"","code":"emptyTable(type = \"gt\")"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/emptyTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns an empty table — emptyTable","text":"type desired format output table. See tableType() allowed options.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/emptyTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns an empty table — emptyTable","text":"empty table class specified type","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/emptyTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns an empty table — emptyTable","text":"Table data","code":"emptyTable(type = \"flextable\") .cl-997645ec{}.cl-99706b5e{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-9972e3e8{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-9972ff04{width:1.5in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}Table has no data"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateName.html","id":null,"dir":"Reference","previous_headings":"","what":"Formats estimate_name and estimate_value column — formatEstimateName","title":"Formats estimate_name and estimate_value column — formatEstimateName","text":"Formats estimate_name estimate_value columns changing name estimate name /joining different estimates together single row.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formats estimate_name and estimate_value column — formatEstimateName","text":"","code":"formatEstimateName(   result,   estimateName = NULL,   keepNotFormatted = TRUE,   useFormatOrder = TRUE )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formats estimate_name and estimate_value column — formatEstimateName","text":"result <summarised_result>. estimateName Named list estimate name's join, sorted computation order. Indicate estimate_name's <...>. keepNotFormatted Whether keep rows formatted. useFormatOrder Whether use order estimate names appear estimateName (TRUE), use order input dataframe (FALSE).","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formats estimate_name and estimate_value column — formatEstimateName","text":"<summarised_result> object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formats estimate_name and estimate_value column — formatEstimateName","text":"","code":"result <- mockSummarisedResult() result |>   formatEstimateName(     estimateName = c(       \"N (%)\" = \"<count> (<percentage>%)\", \"N\" = \"<count>\"     ),     keepNotFormatted = FALSE   ) #> # A tibble: 54 × 13 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         1 mock     cohort_name cohort1     overall           overall         #>  2         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #>  3         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #>  4         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  5         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  6         1 mock     cohort_name cohort1     sex               Male            #>  7         1 mock     cohort_name cohort1     sex               Female          #>  8         1 mock     cohort_name cohort1     age_group         <40             #>  9         1 mock     cohort_name cohort1     age_group         >=40            #> 10         1 mock     cohort_name cohort2     overall           overall         #> # ℹ 44 more rows #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateValue.html","id":null,"dir":"Reference","previous_headings":"","what":"Formats the estimate_value column — formatEstimateValue","title":"Formats the estimate_value column — formatEstimateValue","text":"Formats estimate_value column <summarised_result> object editing number decimals, decimal thousand/millions separator marks.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateValue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formats the estimate_value column — formatEstimateValue","text":"","code":"formatEstimateValue(   result,   decimals = c(integer = 0, numeric = 2, percentage = 1, proportion = 3),   decimalMark = \".\",   bigMark = \",\" )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateValue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formats the estimate_value column — formatEstimateValue","text":"result <summarised_result>. decimals Number decimals per estimate type (integer, numeric, percentage, proportion), estimate name, estimate values (introduce number decimals). decimalMark Decimal separator mark. bigMark Thousand millions separator mark.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateValue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formats the estimate_value column — formatEstimateValue","text":"<summarised_result>.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateValue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formats the estimate_value column — formatEstimateValue","text":"","code":"result <- mockSummarisedResult()  result |> formatEstimateValue(decimals = 1) #> # A tibble: 126 × 13 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         1 mock     cohort_name cohort1     overall           overall         #>  2         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #>  3         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #>  4         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  5         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  6         1 mock     cohort_name cohort1     sex               Male            #>  7         1 mock     cohort_name cohort1     sex               Female          #>  8         1 mock     cohort_name cohort1     age_group         <40             #>  9         1 mock     cohort_name cohort1     age_group         >=40            #> 10         1 mock     cohort_name cohort2     overall           overall         #> # ℹ 116 more rows #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>  result |> formatEstimateValue(decimals = c(integer = 0, numeric = 1)) #> # A tibble: 126 × 13 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         1 mock     cohort_name cohort1     overall           overall         #>  2         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #>  3         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #>  4         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  5         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  6         1 mock     cohort_name cohort1     sex               Male            #>  7         1 mock     cohort_name cohort1     sex               Female          #>  8         1 mock     cohort_name cohort1     age_group         <40             #>  9         1 mock     cohort_name cohort1     age_group         >=40            #> 10         1 mock     cohort_name cohort2     overall           overall         #> # ℹ 116 more rows #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>  result |>   formatEstimateValue(decimals = c(numeric = 1, count = 0)) #> # A tibble: 126 × 13 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         1 mock     cohort_name cohort1     overall           overall         #>  2         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #>  3         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #>  4         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  5         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  6         1 mock     cohort_name cohort1     sex               Male            #>  7         1 mock     cohort_name cohort1     sex               Female          #>  8         1 mock     cohort_name cohort1     age_group         <40             #>  9         1 mock     cohort_name cohort1     age_group         >=40            #> 10         1 mock     cohort_name cohort2     overall           overall         #> # ℹ 116 more rows #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatHeader.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a header for gt and flextable objects — formatHeader","title":"Create a header for gt and flextable objects — formatHeader","text":"Pivots <summarised_result> object based column names header, generating specific column names subsequent header formatting formatTable function.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatHeader.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a header for gt and flextable objects — formatHeader","text":"","code":"formatHeader(   result,   header,   delim = \"\\n\",   includeHeaderName = TRUE,   includeHeaderKey = TRUE )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatHeader.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a header for gt and flextable objects — formatHeader","text":"result <summarised_result>. header Names variables make headers. delim Delimiter use separate headers. includeHeaderName Whether include column name header. includeHeaderKey Whether include header key (header, header_name, header_level) header type column names.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatHeader.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a header for gt and flextable objects — formatHeader","text":"tibble rows pivotted columns key names subsequent header formatting.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatHeader.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a header for gt and flextable objects — formatHeader","text":"","code":"result <- mockSummarisedResult()  result |>   formatHeader(     header = c(       \"Study cohorts\", \"group_level\", \"Study strata\", \"strata_name\",       \"strata_level\"     ),     includeHeaderName = FALSE   ) #> # A tibble: 7 × 27 #>   result_id cdm_name group_name  variable_name   variable_level estimate_name #>       <int> <chr>    <chr>       <chr>           <chr>          <chr>         #> 1         1 mock     cohort_name number subjects NA             count         #> 2         1 mock     cohort_name age             NA             mean          #> 3         1 mock     cohort_name age             NA             sd            #> 4         1 mock     cohort_name Medications     Amoxiciline    count         #> 5         1 mock     cohort_name Medications     Amoxiciline    percentage    #> 6         1 mock     cohort_name Medications     Ibuprofen      count         #> 7         1 mock     cohort_name Medications     Ibuprofen      percentage    #> # ℹ 21 more variables: estimate_type <chr>, additional_name <chr>, #> #   additional_level <chr>, #> #   `[header]Study cohorts\\n[header_level]cohort1\\n[header]Study strata\\n[header_level]overall\\n[header_level]overall` <chr>, #> #   `[header]Study cohorts\\n[header_level]cohort1\\n[header]Study strata\\n[header_level]age_group &&& sex\\n[header_level]<40 &&& Male` <chr>, #> #   `[header]Study cohorts\\n[header_level]cohort1\\n[header]Study strata\\n[header_level]age_group &&& sex\\n[header_level]>=40 &&& Male` <chr>, #> #   `[header]Study cohorts\\n[header_level]cohort1\\n[header]Study strata\\n[header_level]age_group &&& sex\\n[header_level]<40 &&& Female` <chr>, #> #   `[header]Study cohorts\\n[header_level]cohort1\\n[header]Study strata\\n[header_level]age_group &&& sex\\n[header_level]>=40 &&& Female` <chr>, …"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatMinCellCount.html","id":null,"dir":"Reference","previous_headings":"","what":"To indicate which was the minimum cell counts where estimates have been suppressed. — formatMinCellCount","title":"To indicate which was the minimum cell counts where estimates have been suppressed. — formatMinCellCount","text":"indicate minimum cell counts estimates suppressed.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatMinCellCount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"To indicate which was the minimum cell counts where estimates have been suppressed. — formatMinCellCount","text":"","code":"formatMinCellCount(result)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatMinCellCount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"To indicate which was the minimum cell counts where estimates have been suppressed. — formatMinCellCount","text":"result <summarised_result> object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatMinCellCount.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"To indicate which was the minimum cell counts where estimates have been suppressed. — formatMinCellCount","text":"","code":"result <- mockSummarisedResult() result |> formatMinCellCount() #> # A tibble: 126 × 13 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         1 mock     cohort_name cohort1     overall           overall         #>  2         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #>  3         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #>  4         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  5         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  6         1 mock     cohort_name cohort1     sex               Male            #>  7         1 mock     cohort_name cohort1     sex               Female          #>  8         1 mock     cohort_name cohort1     age_group         <40             #>  9         1 mock     cohort_name cohort1     age_group         >=40            #> 10         1 mock     cohort_name cohort2     overall           overall         #> # ℹ 116 more rows #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a flextable or gt object from a dataframe — formatTable","title":"Creates a flextable or gt object from a dataframe — formatTable","text":"Creates flextable object dataframe using delimiter span header, allows easily customise table style.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a flextable or gt object from a dataframe — formatTable","text":"","code":"formatTable(   x,   type = \"gt\",   delim = \"\\n\",   style = \"default\",   na = \"-\",   title = NULL,   subtitle = NULL,   caption = NULL,   groupColumn = NULL,   groupAsColumn = FALSE,   groupOrder = NULL,   merge = NULL )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a flextable or gt object from a dataframe — formatTable","text":"x dataframe. type desired format output table. See tableType() allowed options. \"tibble\", formatting applied. delim Delimiter. style Named list specifies style different parts gt flextable table generated. Accepted style entries : title, subtitle, header, header_name, header_level, column_name, group_label, body. Alternatively, use \"default\" get visOmopResults style, NULL gt/flextable style. Keep mind styling code different gt flextable. see \"deafult\" style code use tableStyle(). na display missing values. used \"datatable\". title Title table, NULL title. used \"datatable\". subtitle Subtitle table, NULL subtitle. used \"datatable\". caption Caption table, NULL caption. Text markdown formatting style (e.g. *caption * caption italics). groupColumn Specifies columns use group labels. default, new group name combination column names, joined \"_\". assign custom group name, provide named list : list(newGroupName = c(\"variable_name\", \"variable_level\")) groupAsColumn Whether display group labels column (TRUE) rows (FALSE). used \"datatable\". groupOrder Order display group labels. used \"datatable\". merge Names columns merge vertically consecutive row cells identical values. Alternatively, use \"all_columns\" apply merging columns, use NULL indicate merging. used \"datatable\".","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a flextable or gt object from a dataframe — formatTable","text":"flextable object. flextable gt object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a flextable or gt object from a dataframe — formatTable","text":"fxTable example group_level result_id cdm_name group_name variable_name variable_level estimate_name estimate_type additional_name additional_level Study strata overall age_group &&& sex sex age_group overall <40 &&& Male >=40 &&& Male <40 &&& Female >=40 &&& Female Male Female <40 >=40 cohort1 1 mock cohort_name number subjects -- count integer overall overall 7,312,292 3,986,198 4,305,207 1,454,073 4,511,203 5,787,815 704,171 7,423,262 5,492,207    age -- mean numeric overall overall 77.8 65.8 25.9 91.8 14.9 64.1 20.1 74.4 84.8      sd numeric overall overall 4.4 9.0 7.7 1.3 5.4 1.3 5.1 5.4 2.4    Medications Amoxiciline count integer overall overall 36,924 12,667 73,987 95,587 66,867 46,809 53,819 33,095 62,868      percentage percentage overall overall 6.84064193628728 95.8503520581871 24.4483520975336 92.6283334614709 50.2747076796368 93.5517142061144 43.8799632480368 35.0486536743119 47.6504088379443     Ibuprofen count integer overall overall 13,002 79,191 35,590 96,434 11,868 45,816 52,365 83,706 3,350      percentage percentage overall overall 75.4406645428389 24.2454329272732 62.715786579065 16.8414602987468 44.4789632922038 16.4675234118477 11.8276783032343 36.7464390583336 94.6558905066922 cohort2 1 mock cohort_name number subjects -- count integer overall overall 6,345,443 1,366,286 9,302,335 6,511,186 5,287,093 2,251,154 9,832,669 1,090,488 699,455    age -- mean numeric overall overall 85.4 80.3 2.4 79.5 88.7 60.0 43.3 92.0 61.6      sd numeric overall overall 8.0 9.5 4.1 5.1 9.8 3.5 4.6 2.2 0.8    Medications Amoxiciline count integer overall overall 45,255 88,802 78,420 13,806 28,131 70,695 44,219 67,770 70,071      percentage percentage overall overall 96.6159525094554 29.7161926981062 29.0648308349773 85.9722247580066 19.3312666844577 80.9108371380717 36.5486512426287 25.2699653152376 85.6081013800576     Ibuprofen count integer overall overall 4,333 79,210 20,270 6,880 86,444 7,709 43,100 97,362 57,096      percentage percentage overall overall 87.5410763313994 26.0058912448585 65.7298437319696 12.1864625485614 31.8848039023578 62.3061030171812 44.6997430175543 70.8293445874006 89.0028999885544","code":"# Example 1 mockSummarisedResult() |>   formatEstimateValue(decimals = c(integer = 0, numeric = 1)) |>   formatHeader(     header = c(\"Study strata\", \"strata_name\", \"strata_level\"),     includeHeaderName = FALSE   ) |>   formatTable(     type = \"flextable\",     style = \"default\",     na = \"--\",     title = \"fxTable example\",     subtitle = NULL,     caption = NULL,     groupColumn = \"group_level\",     groupAsColumn = TRUE,     groupOrder = c(\"cohort1\", \"cohort2\"),     merge = \"all_columns\"   ) .cl-9ac2c6dc{}.cl-9ab95da4{font-family:'Arial';font-size:15pt;font-weight:bold;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-9ab95dae{font-family:'Arial';font-size:10pt;font-weight:bold;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-9ab95daf{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-9abcca84{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-9abcca8e{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-9abcca98{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-9abcf2ca{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.2pt solid rgba(190, 190, 190, 1.00);border-top: 1.2pt solid rgba(190, 190, 190, 1.00);border-left: 1.2pt solid rgba(190, 190, 190, 1.00);border-right: 1.2pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-9abcf2d4{width:0.75in;background-color:rgba(200, 200, 200, 1.00);vertical-align: middle;border-bottom: 1.2pt solid rgba(190, 190, 190, 1.00);border-top: 1.2pt solid rgba(190, 190, 190, 1.00);border-left: 1.2pt solid rgba(190, 190, 190, 1.00);border-right: 1.2pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-9abcf2d5{width:0.75in;background-color:rgba(225, 225, 225, 1.00);vertical-align: middle;border-bottom: 1.2pt solid rgba(190, 190, 190, 1.00);border-top: 1.2pt solid rgba(190, 190, 190, 1.00);border-left: 1.2pt solid rgba(190, 190, 190, 1.00);border-right: 1.2pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-9abcf2de{width:0.75in;background-color:rgba(233, 233, 233, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 1pt solid rgba(190, 190, 190, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-9abcf2df{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-9abcf2e8{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-9abcf2e9{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-9abcf2f2{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-9abcf2f3{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-9abcf2fc{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}fxTable examplegroup_levelresult_idcdm_namegroup_namevariable_namevariable_levelestimate_nameestimate_typeadditional_nameadditional_levelStudy strataoverallage_group &&& sexsexage_groupoverall<40 &&& Male>=40 &&& Male<40 &&& Female>=40 &&& FemaleMaleFemale<40>=40cohort11mockcohort_namenumber subjects--countintegeroveralloverall7,312,2923,986,1984,305,2071,454,0734,511,2035,787,815704,1717,423,2625,492,207age--meannumericoveralloverall77.865.825.991.814.964.120.174.484.8sdnumericoveralloverall4.49.07.71.35.41.35.15.42.4MedicationsAmoxicilinecountintegeroveralloverall36,92412,66773,98795,58766,86746,80953,81933,09562,868percentagepercentageoveralloverall6.8406419362872895.850352058187124.448352097533692.628333461470950.274707679636893.551714206114443.879963248036835.048653674311947.6504088379443Ibuprofencountintegeroveralloverall13,00279,19135,59096,43411,86845,81652,36583,7063,350percentagepercentageoveralloverall75.440664542838924.245432927273262.71578657906516.841460298746844.478963292203816.467523411847711.827678303234336.746439058333694.6558905066922cohort21mockcohort_namenumber subjects--countintegeroveralloverall6,345,4431,366,2869,302,3356,511,1865,287,0932,251,1549,832,6691,090,488699,455age--meannumericoveralloverall85.480.32.479.588.760.043.392.061.6sdnumericoveralloverall8.09.54.15.19.83.54.62.20.8MedicationsAmoxicilinecountintegeroveralloverall45,25588,80278,42013,80628,13170,69544,21967,77070,071percentagepercentageoveralloverall96.615952509455429.716192698106229.064830834977385.972224758006619.331266684457780.910837138071736.548651242628725.269965315237685.6081013800576Ibuprofencountintegeroveralloverall4,33379,21020,2706,88086,4447,70943,10097,36257,096percentagepercentageoveralloverall87.541076331399426.005891244858565.729843731969612.186462548561431.884803902357862.306103017181244.699743017554370.829344587400689.0028999885544 # Example 2 mockSummarisedResult() |>   formatEstimateValue(decimals = c(integer = 0, numeric = 1)) |>   formatHeader(header = c(\"Study strata\", \"strata_name\", \"strata_level\"),               includeHeaderName = FALSE) |>   formatTable(     type = \"gt\",     style = list(\"header\" = list(       gt::cell_fill(color = \"#d9d9d9\"),       gt::cell_text(weight = \"bold\")),       \"header_level\" = list(gt::cell_fill(color = \"#e1e1e1\"),                             gt::cell_text(weight = \"bold\")),       \"column_name\" = list(gt::cell_text(weight = \"bold\")),       \"title\" = list(gt::cell_text(weight = \"bold\"),                      gt::cell_fill(color = \"#c8c8c8\")),       \"group_label\" = gt::cell_fill(color = \"#e1e1e1\")),     na = \"--\",     title = \"gtTable example\",     subtitle = NULL,     caption = NULL,     groupColumn = \"group_level\",     groupAsColumn = FALSE,     groupOrder = c(\"cohort1\", \"cohort2\"),     merge = \"all_columns\"   )     gtTable example                     Study strata            result_id       cdm_name       group_name       variable_name       variable_level       estimate_name       estimate_type       additional_name       additional_level                overall                       age_group &&& sex                       sex                       age_group            overall       <40 &&& Male       >=40 &&& Male       <40 &&& Female       >=40 &&& Female       Male       Female       <40       >=40     cohort1     1 mock cohort_name number subjects -- count integer overall overall 1,043,065 6,304,117 8,415,589 3,642,624 6,229,228 4,607,475 1,634,123 5,138,669 1,432,664   age -- mean numeric overall overall 39.8 63.2 94.9 34.0 62.7 82.5 14.5 96.7 8.6     sd numeric overall overall 9.3 4.2 5.0 3.5 2.5 9.6 3.6 2.0 7.3   Medications Amoxiciline count integer overall overall 92,396 98,219 40,527 26,969 48,829 5,106 248 49,583 24,379     percentage percentage overall overall 56.9740539882332 69.6488575544208 70.0767503585666 3.99406552314758 43.1522403843701 81.4231365453452 56.658627698198 58.8247172767296 88.0309032043442    Ibuprofen count integer overall overall 41,797 76,393 79,448 24,259 75,917 2,910 43,734 53,041 42,983     percentage percentage overall overall 29.3585412902758 22.4765427643433 69.0917830914259 31.2329404754564 48.3298178529367 12.179663986899 69.0007234923542 31.5731404349208 81.6187682561576cohort2     1 mock cohort_name number subjects -- count integer overall overall 6,502,987 1,552,945 5,083,099 858,704 5,030,267 385,719 8,240,329 2,859,856 2,467,509   age -- mean numeric overall overall 24.0 63.9 50.3 25.1 97.9 65.7 9.0 63.1 87.7     sd numeric overall overall 1.7 2.3 8.5 3.5 0.7 0.3 1.2 0.1 7.4   Medications Amoxiciline count integer overall overall 25,575 55,232 25,158 62,845 31,612 92,452 90,649 9,197 73,780     percentage percentage overall overall 71.9317963346839 93.6428893357515 42.943161376752 28.618732560426 77.0643183263019 61.6498636547476 15.9274747595191 40.1598005788401 0.164648867212236    Ibuprofen count integer overall overall 80,930 92,256 67,502 9,397 19,746 47,555 71,437 53,808 87,538     percentage percentage overall overall 54.5915438327938 94.7317183716223 3.8526406744495 64.764387672767 7.96190109103918 43.2930769631639 76.0893133934587 29.3758839834481 10.7331892941147"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/mockSummarisedResult.html","id":null,"dir":"Reference","previous_headings":"","what":"A <summarised_result> object filled with mock data — mockSummarisedResult","title":"A <summarised_result> object filled with mock data — mockSummarisedResult","text":"Creates object class <summarised_result> mock data illustration purposes.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/mockSummarisedResult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A <summarised_result> object filled with mock data — mockSummarisedResult","text":"","code":"mockSummarisedResult()"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/mockSummarisedResult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A <summarised_result> object filled with mock data — mockSummarisedResult","text":"object class <summarised_result> mock data.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/mockSummarisedResult.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A <summarised_result> object filled with mock data — mockSummarisedResult","text":"","code":"mockSummarisedResult() #> # A tibble: 126 × 13 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         1 mock     cohort_name cohort1     overall           overall         #>  2         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #>  3         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #>  4         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  5         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  6         1 mock     cohort_name cohort1     sex               Male            #>  7         1 mock     cohort_name cohort1     sex               Female          #>  8         1 mock     cohort_name cohort1     age_group         <40             #>  9         1 mock     cohort_name cohort1     age_group         >=40            #> 10         1 mock     cohort_name cohort2     overall           overall         #> # ℹ 116 more rows #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/plotColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Columns for the plot functions — plotColumns","title":"Columns for the plot functions — plotColumns","text":"Names columns can used input arguments plot functions.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/plotColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Columns for the plot functions — plotColumns","text":"","code":"plotColumns(result)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/plotColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Columns for the plot functions — plotColumns","text":"result <summarised_result> object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/plotColumns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Columns for the plot functions — plotColumns","text":"character vector supported columns plots.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/plotColumns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Columns for the plot functions — plotColumns","text":"","code":"result <- mockSummarisedResult() plotColumns(result) #>  [1] \"cdm_name\"       \"cohort_name\"    \"age_group\"      \"sex\"            #>  [5] \"variable_name\"  \"variable_level\" \"count\"          \"mean\"           #>  [9] \"sd\"             \"percentage\""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. generics tidy omopgenerics additionalColumns, addSettings, bind, exportSummarisedResult, filterAdditional, filterGroup, filterSettings, filterStrata, groupColumns, importSummarisedResult, pivotEstimates, settings, settingsColumns, splitAdditional, splitAll, splitGroup, splitStrata, strataColumns, suppress, tidy, tidyColumns, uniteAdditional, uniteGroup, uniteStrata","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/scatterPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a scatter plot visualisation from a <summarised_result> object — scatterPlot","title":"Create a scatter plot visualisation from a <summarised_result> object — scatterPlot","text":"Create scatter plot visualisation <summarised_result> object","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/scatterPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a scatter plot visualisation from a <summarised_result> object — scatterPlot","text":"","code":"scatterPlot(   result,   x,   y,   line,   point,   ribbon,   ymin = NULL,   ymax = NULL,   facet = NULL,   colour = NULL,   group = colour,   label = character() )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/scatterPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a scatter plot visualisation from a <summarised_result> object — scatterPlot","text":"result <summarised_result> object. x Column estimate name used x variable. y Column estimate name used y variable line Whether plot line using geom_line. point Whether plot points using geom_point. ribbon Whether plot ribbon using geom_ribbon. ymin Lower limit error bars, provided plot using geom_errorbar. ymax Upper limit error bars, provided plot using geom_errorbar. facet Variables facet , formula can provided specify variables used rows ones columns. colour Columns use determine colors. group Columns use determine group. label Character vector columns display interactively plotly.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/scatterPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a scatter plot visualisation from a <summarised_result> object — scatterPlot","text":"plot object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/scatterPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a scatter plot visualisation from a <summarised_result> object — scatterPlot","text":"","code":"result <- mockSummarisedResult() |>   dplyr::filter(variable_name == \"age\")  scatterPlot(   result = result,   x = \"cohort_name\",   y = \"mean\",   line = TRUE,   point = TRUE,   ribbon = FALSE,   facet = age_group ~ sex) #> `geom_line()`: Each group consists of only one observation. #> ℹ Do you need to adjust the group aesthetic? #> `geom_line()`: Each group consists of only one observation. #> ℹ Do you need to adjust the group aesthetic? #> `geom_line()`: Each group consists of only one observation. #> ℹ Do you need to adjust the group aesthetic? #> `geom_line()`: Each group consists of only one observation. #> ℹ Do you need to adjust the group aesthetic? #> `geom_line()`: Each group consists of only one observation. #> ℹ Do you need to adjust the group aesthetic? #> `geom_line()`: Each group consists of only one observation. #> ℹ Do you need to adjust the group aesthetic? #> `geom_line()`: Each group consists of only one observation. #> ℹ Do you need to adjust the group aesthetic? #> `geom_line()`: Each group consists of only one observation. #> ℹ Do you need to adjust the group aesthetic? #> `geom_line()`: Each group consists of only one observation. #> ℹ Do you need to adjust the group aesthetic?"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tableColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Columns for the table functions — tableColumns","title":"Columns for the table functions — tableColumns","text":"Names columns can used input arguments table functions.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tableColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Columns for the table functions — tableColumns","text":"","code":"tableColumns(result)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tableColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Columns for the table functions — tableColumns","text":"result <summarised_result> object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tableColumns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Columns for the table functions — tableColumns","text":"character vector supported columns tables.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tableColumns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Columns for the table functions — tableColumns","text":"","code":"result <- mockSummarisedResult() tableColumns(result) #> [1] \"cdm_name\"       \"cohort_name\"    \"age_group\"      \"sex\"            #> [5] \"variable_name\"  \"variable_level\" \"estimate_name\""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tableOptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Additional table formatting options for visOmopTable() and visTable() — tableOptions","title":"Additional table formatting options for visOmopTable() and visTable() — tableOptions","text":"function provides list allowed inputs .option argument visOmopTable() visTable(), corresponding default values.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tableOptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Additional table formatting options for visOmopTable() and visTable() — tableOptions","text":"","code":"tableOptions()"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tableOptions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Additional table formatting options for visOmopTable() and visTable() — tableOptions","text":"named list default options table customisation.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tableOptions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Additional table formatting options for visOmopTable() and visTable() — tableOptions","text":"","code":"tableOptions() #> $decimals #>    integer percentage    numeric proportion  #>          0          2          2          2  #>  #> $decimalMark #> [1] \".\" #>  #> $bigMark #> [1] \",\" #>  #> $keepNotFormatted #> [1] TRUE #>  #> $useFormatOrder #> [1] TRUE #>  #> $delim #> [1] \"\\n\" #>  #> $includeHeaderName #> [1] TRUE #>  #> $includeHeaderKey #> [1] TRUE #>  #> $style #> [1] \"default\" #>  #> $na #> [1] \"-\" #>  #> $title #> NULL #>  #> $subtitle #> NULL #>  #> $caption #> NULL #>  #> $groupAsColumn #> [1] FALSE #>  #> $groupOrder #> NULL #>  #> $merge #> [1] \"all_columns\" #>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tableStyle.html","id":null,"dir":"Reference","previous_headings":"","what":"Supported predefined styles for formatted tables — tableStyle","title":"Supported predefined styles for formatted tables — tableStyle","text":"Supported predefined styles formatted tables","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tableStyle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Supported predefined styles for formatted tables — tableStyle","text":"","code":"tableStyle(type = \"gt\")"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tableStyle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Supported predefined styles for formatted tables — tableStyle","text":"type Character string specifying formatted table class. See tableType() supported classes. Default \"gt\".","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tableStyle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Supported predefined styles for formatted tables — tableStyle","text":"code expression selected style table type.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tableStyle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Supported predefined styles for formatted tables — tableStyle","text":"","code":"tableStyle(\"gt\") #> list(header = list(gt::cell_fill(color = \"#c8c8c8\"), gt::cell_text(weight = \"bold\",  #>     align = \"center\")), header_name = list(gt::cell_fill(color = \"#d9d9d9\"),  #>     gt::cell_text(weight = \"bold\", align = \"center\")), header_level = list(gt::cell_fill(color = \"#e1e1e1\"),  #>     gt::cell_text(weight = \"bold\", align = \"center\")), column_name = list(gt::cell_text(weight = \"bold\",  #>     align = \"center\")), group_label = list(gt::cell_fill(color = \"#e9e9e9\"),  #>     gt::cell_text(weight = \"bold\")), title = list(gt::cell_text(weight = \"bold\",  #>     size = 15, align = \"center\")), subtitle = list(gt::cell_text(weight = \"bold\",  #>     size = 12, align = \"center\")), body = list()) tableStyle(\"flextable\") #> list(header = list(cell = officer::fp_cell(background.color = \"#c8c8c8\"),  #>     text = officer::fp_text(bold = TRUE)), header_name = list(cell = officer::fp_cell(background.color = \"#d9d9d9\"),  #>     text = officer::fp_text(bold = TRUE)), header_level = list(cell = officer::fp_cell(background.color = \"#e1e1e1\"),  #>     text = officer::fp_text(bold = TRUE)), column_name = list(text = officer::fp_text(bold = TRUE)),  #>     group_label = list(cell = officer::fp_cell(background.color = \"#e9e9e9\",  #>         border = officer::fp_border(color = \"gray\")), text = officer::fp_text(bold = TRUE)),  #>     title = list(text = officer::fp_text(bold = TRUE, font.size = 15)),  #>     subtitle = list(text = officer::fp_text(bold = TRUE, font.size = 12)),  #>     body = list())"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tableType.html","id":null,"dir":"Reference","previous_headings":"","what":"Supported table classes — tableType","title":"Supported table classes — tableType","text":"function returns supported table classes can used type argument visOmopTable(), visTable(), formatTable() functions.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tableType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Supported table classes — tableType","text":"","code":"tableType()"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tableType.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Supported table classes — tableType","text":"character vector supported table types.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tableType.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Supported table classes — tableType","text":"","code":"tableType() #> [1] \"gt\"        \"flextable\" \"tibble\"    \"datatable\""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/themeVisOmop.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply visOmopResults default styling to a ggplot — themeVisOmop","title":"Apply visOmopResults default styling to a ggplot — themeVisOmop","text":"Apply visOmopResults default styling ggplot","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/themeVisOmop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply visOmopResults default styling to a ggplot — themeVisOmop","text":"","code":"themeVisOmop(fontsizeRef = 10)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/themeVisOmop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply visOmopResults default styling to a ggplot — themeVisOmop","text":"fontsizeRef integer use reference adjusting label fontsize.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/themeVisOmop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply visOmopResults default styling to a ggplot — themeVisOmop","text":"","code":"result <- mockSummarisedResult() |> dplyr::filter(variable_name == \"age\")  barPlot(   result = result,   x = \"cohort_name\",   y = \"mean\",   facet = c(\"age_group\", \"sex\"),   colour = \"sex\") +   themeVisOmop()"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visOmopResults-package.html","id":null,"dir":"Reference","previous_headings":"","what":"visOmopResults: Graphs and Tables for OMOP Results — visOmopResults-package","title":"visOmopResults: Graphs and Tables for OMOP Results — visOmopResults-package","text":"Provides methods transform omop_result objects formatted tables figures, facilitating visualisation study results working Observational Medical Outcomes Partnership (OMOP) Common Data Model.","code":""},{"path":[]},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visOmopResults-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"visOmopResults: Graphs and Tables for OMOP Results — visOmopResults-package","text":"Maintainer: Núria Mercadé-Besora nuria.mercadebesora@ndorms.ox.ac.uk (ORCID) Authors: Martí Català marti.catalasabate@ndorms.ox.ac.uk (ORCID) Marta Alcalde-Herraiz marta.alcaldeherraiz@ndorms.ox.ac.uk (ORCID) contributors: Yuchen Guo yuchen.guo@ndorms.ox.ac.uk (ORCID) [contributor] Elin Rowlands elin.rowlands@ndorms.ox.ac.uk (ORCID) [contributor] Edward Burn edward.burn@ndorms.ox.ac.uk (ORCID) [contributor]","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visOmopTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a <summarised_result> object into a gt, flextable, or tibble object — visOmopTable","title":"Format a <summarised_result> object into a gt, flextable, or tibble object — visOmopTable","text":"function combines functionalities formatEstimateValue(), estimateName(), formatHeader(), formatTable() single function specifically <summarised_result> objects.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visOmopTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a <summarised_result> object into a gt, flextable, or tibble object — visOmopTable","text":"","code":"visOmopTable(   result,   estimateName = character(),   header = character(),   settingsColumn = character(),   groupColumn = character(),   rename = character(),   type = \"gt\",   hide = character(),   columnOrder = character(),   factor = list(),   showMinCellCount = TRUE,   .options = list() )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visOmopTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a <summarised_result> object into a gt, flextable, or tibble object — visOmopTable","text":"result <summarised_result> object. estimateName named list estimate names join, sorted computation order. Use <...> indicate estimate names. header vector specifying elements include header. order elements matters, first topmost header. Elements header can : columns returned tableColumns(result) create header columns. input create overall header. settingsColumn character vector names settings include table. see options use settingsColumns(result). groupColumn Columns use group labels, see options use tableColumns(result). default, name new group tidy* column names separated \";\". specify custom group name, use named list : list(\"newGroupName\" = c(\"variable_name\", \"variable_level\")). *tidy: tidy format applied column names replaces \"_\" space converts sentence case. Use rename customise specific column names. rename named vector customise column names, e.g., c(\"Database name\" = \"cdm_name\"). function renames column names specified tidy* format. type desired format output table. See tableType() allowed options. hide Columns drop output table. default, result_id estimate_type always dropped. columnOrder Character vector establishing position columns formatted table. Columns either header, groupColumn, hide ignored. factor named list names refer columns (see available columns tableColumns()) list elements level order column arrange results. column order list used arranging result. showMinCellCount TRUE, suppressed estimates indicated \"<{min_cell_count}\", otherwise, default na defined .options used. .options named list additional formatting options. visOmopResults::tableOptions() shows allowed arguments default values.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visOmopTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a <summarised_result> object into a gt, flextable, or tibble object — visOmopTable","text":"tibble, gt, flextable object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visOmopTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a <summarised_result> object into a gt, flextable, or tibble object — visOmopTable","text":"","code":"result <- mockSummarisedResult() result |>   visOmopTable(     estimateName = c(\"N%\" = \"<count> (<percentage>)\",                      \"N\" = \"<count>\",                      \"Mean (SD)\" = \"<mean> (<sd>)\"),     header = c(\"group\"),     rename = c(\"Database name\" = \"cdm_name\"),     groupColumn = strataColumns(result)   )     Database name       Variable name       Variable level       Estimate name                Cohort name            cohort1       cohort2     overall; overall     mock number subjects - N 7,831,176 8,072,527 age - Mean (SD) 54.24 (2.33) 16.82 (6.85) Medications Amoxiciline N% 32,540 (60.33) 91,252 (80.25)  Ibuprofen N% 88,607 (46.00) 92,362 (91.81)<40; Male     mock number subjects - N 587,160 3,527,889 age - Mean (SD) 79.68 (3.25) 98.03 (6.01) Medications Amoxiciline N% 91,576 (31.16) 75,292 (54.22)  Ibuprofen N% 59,221 (16.60) 1,622 (79.51)>=40; Male     mock number subjects - N 3,583,615 7,531,261 age - Mean (SD) 71.96 (1.00) 60.07 (7.06) Medications Amoxiciline N% 8,054 (55.52) 64,148 (63.10)  Ibuprofen N% 72,241 (91.54) 17,148 (91.31)<40; Female     mock number subjects - N 4,793,860 9,081,511 age - Mean (SD) 72.82 (3.30) 15.17 (4.68) Medications Amoxiciline N% 85,552 (93.76) 79,545 (18.98)  Ibuprofen N% 51,239 (40.94) 21,399 (39.06)>=40; Female     mock number subjects - N 7,230,918 4,353,852 age - Mean (SD) 4.78 (1.93) 29.27 (0.11) Medications Amoxiciline N% 30,503 (36.50) 98,497 (20.35)  Ibuprofen N% 29,607 (64.05) 84,512 (35.74)overall; Male     mock number subjects - N 6,964,027 2,202,471 age - Mean (SD) 45.14 (2.69) 44.81 (7.83) Medications Amoxiciline N% 73,636 (33.86) 62,237 (92.84)  Ibuprofen N% 63,978 (16.48) 24,332 (61.44)overall; Female     mock number subjects - N 8,707,106 371,822 age - Mean (SD) 79.43 (8.84) 82.39 (6.22) Medications Amoxiciline N% 94,096 (76.97) 55,533 (41.34)  Ibuprofen N% 88,254 (18.10) 51,505 (19.24)<40; overall     mock number subjects - N 7,088,059 6,980,541 age - Mean (SD) 82.46 (6.71) 96.94 (8.66) Medications Amoxiciline N% 86,102 (30.13) 96,107 (13.10)  Ibuprofen N% 94,615 (99.65) 86,319 (7.18)>=40; overall     mock number subjects - N 3,548,055 1,498,340 age - Mean (SD) 20.91 (0.74) 29.54 (9.20) Medications Amoxiciline N% 36,417 (62.96) 91,564 (6.12)  Ibuprofen N% 70,942 (64.51) 4,056 (30.62)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a formatted table from a <data.table> — visTable","title":"Generate a formatted table from a <data.table> — visTable","text":"function combines functionalities formatEstimateValue(), formatEstimateName(), formatHeader(), formatTable() single function. require input table <summarised_result>, expect specific fields apply formatting functionalities.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a formatted table from a <data.table> — visTable","text":"","code":"visTable(   result,   estimateName = character(),   header = character(),   groupColumn = character(),   rename = character(),   type = \"gt\",   hide = character(),   .options = list() )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a formatted table from a <data.table> — visTable","text":"result table format. estimateName named list estimate names join, sorted computation order. Use <...> indicate estimate names. argument requires table estimate_name estimate_value columns. header vector specifying elements include header. order elements matters, first topmost header. vector elements can column names labels overall headers. table must contain estimate_value column pivot headers. groupColumn Columns use group labels. default, name new group tidy* column names separated \";\". specify custom group name, use named list : list(\"newGroupName\" = c(\"variable_name\", \"variable_level\")). *tidy: tidy format applied column names replaces \"_\" space converts sentence case. Use rename customise specific column names. rename named vector customise column names, e.g., c(\"Database name\" = \"cdm_name\"). function rename column names specified tidy* format. type desired format output table. See tableType() allowed options. hide Columns drop output table. .options named list additional formatting options. visOmopResults::tableOptions() shows allowed arguments default values.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a formatted table from a <data.table> — visTable","text":"tibble, gt, flextable object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a formatted table from a <data.table> — visTable","text":"","code":"result <- mockSummarisedResult() result |>   visTable(     estimateName = c(\"N%\" = \"<count> (<percentage>)\",                      \"N\" = \"<count>\",                      \"Mean (SD)\" = \"<mean> (<sd>)\"),     header = c(\"Estimate\"),     rename = c(\"Database name\" = \"cdm_name\"),     groupColumn = c(\"strata_name\", \"strata_level\"),     hide = c(\"additional_name\", \"additional_level\", \"estimate_type\", \"result_type\")   )     Result id       Database name       Group name       Group level       Variable name       Variable level       Estimate name       Estimate     overall; overall     1 mock cohort_name cohort1 number subjects - N 7,713,282   cohort2 number subjects - N 4,433,637   cohort1 age - Mean (SD) 32.98 (0.89)   cohort2 age - Mean (SD) 98.14 (7.24)   cohort1 Medications Amoxiciline N% 18,154 (17.99)   cohort2 Medications Amoxiciline N% 40,022 (94.84)   cohort1 Medications Ibuprofen N% 56,552 (64.62)   cohort2 Medications Ibuprofen N% 47,423 (24.78)age_group &&& sex; <40 &&& Male     1 mock cohort_name cohort1 number subjects - N 5,017,637   cohort2 number subjects - N 3,061,836   cohort1 age - Mean (SD) 39.95 (9.20)   cohort2 age - Mean (SD) 78.17 (3.85)   cohort1 Medications Amoxiciline N% 87,894 (79.50)   cohort2 Medications Amoxiciline N% 34,734 (14.43)   cohort1 Medications Ibuprofen N% 46,619 (92.13)   cohort2 Medications Ibuprofen N% 57,504 (52.07)age_group &&& sex; >=40 &&& Male     1 mock cohort_name cohort1 number subjects - N 7,112,888   cohort2 number subjects - N 2,693,460   cohort1 age - Mean (SD) 69.92 (6.38)   cohort2 age - Mean (SD) 60.55 (3.89)   cohort1 Medications Amoxiciline N% 67,666 (52.92)   cohort2 Medications Amoxiciline N% 8,135 (80.38)   cohort1 Medications Ibuprofen N% 23,349 (28.88)   cohort2 Medications Ibuprofen N% 21,033 (13.30)age_group &&& sex; <40 &&& Female     1 mock cohort_name cohort1 number subjects - N 918,984   cohort2 number subjects - N 2,704,266   cohort1 age - Mean (SD) 24.25 (4.17)   cohort2 age - Mean (SD) 20.84 (1.30)   cohort1 Medications Amoxiciline N% 50,744 (46.61)   cohort2 Medications Amoxiciline N% 4,009 (29.43)   cohort1 Medications Ibuprofen N% 74,081 (65.44)   cohort2 Medications Ibuprofen N% 59,830 (81.60)age_group &&& sex; >=40 &&& Female     1 mock cohort_name cohort1 number subjects - N 1,059,088   cohort2 number subjects - N 976,897   cohort1 age - Mean (SD) 2.75 (7.02)   cohort2 age - Mean (SD) 76.37 (2.85)   cohort1 Medications Amoxiciline N% 48,141 (89.22)   cohort2 Medications Amoxiciline N% 26,791 (38.14)   cohort1 Medications Ibuprofen N% 29,534 (61.88)   cohort2 Medications Ibuprofen N% 2,650 (30.78)sex; Male     1 mock cohort_name cohort1 number subjects - N 2,249,139   cohort2 number subjects - N 9,920,600   cohort1 age - Mean (SD) 7.01 (1.61)   cohort2 age - Mean (SD) 81.88 (1.31)   cohort1 Medications Amoxiciline N% 96,832 (74.20)   cohort2 Medications Amoxiciline N% 48,458 (23.72)   cohort1 Medications Ibuprofen N% 8,237 (64.43)   cohort2 Medications Ibuprofen N% 85,237 (34.65)sex; Female     1 mock cohort_name cohort1 number subjects - N 4,176,636   cohort2 number subjects - N 1,045,265   cohort1 age - Mean (SD) 2.37 (3.78)   cohort2 age - Mean (SD) 76.11 (4.74)   cohort1 Medications Amoxiciline N% 24,795 (76.37)   cohort2 Medications Amoxiciline N% 60,385 (34.61)   cohort1 Medications Ibuprofen N% 27,436 (58.79)   cohort2 Medications Ibuprofen N% 53,381 (32.44)age_group; <40     1 mock cohort_name cohort1 number subjects - N 3,440,131   cohort2 number subjects - N 4,344,885   cohort1 age - Mean (SD) 20.66 (9.75)   cohort2 age - Mean (SD) 82.86 (9.80)   cohort1 Medications Amoxiciline N% 13,281 (84.41)   cohort2 Medications Amoxiciline N% 21,268 (42.90)   cohort1 Medications Ibuprofen N% 93,106 (95.90)   cohort2 Medications Ibuprofen N% 9,865 (83.00)age_group; >=40     1 mock cohort_name cohort1 number subjects - N 6,642,060   cohort2 number subjects - N 6,846,876   cohort1 age - Mean (SD) 69.89 (4.04)   cohort2 age - Mean (SD) 0.85 (1.68)   cohort1 Medications Amoxiciline N% 6,827 (70.52)   cohort2 Medications Amoxiciline N% 8,016 (59.99)   cohort1 Medications Ibuprofen N% 88,141 (16.80)   cohort2 Medications Ibuprofen N% 69,738 (16.98)"},{"path":"https://darwin-eu.github.io/visOmopResults/news/index.html","id":"visomopresults-100","dir":"Changelog","previous_headings":"","what":"visOmopResults 1.0.0","title":"visOmopResults 1.0.0","text":"CRAN release: 2025-01-15 Added NEWS.md file track changes package.","code":""}]
